name: Check Composable Files for Hardcoded Values

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  check-hardcoded-values:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for the branches involved in the PR

      - name: Fetch base and head branches
        run: |
          git fetch origin +refs/heads/${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          git fetch origin +refs/heads/${{ github.event.pull_request.head.ref }}:refs/remotes/origin/${{ github.event.pull_request.head.ref }}

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17
          java-package: jdk
          architecture: x64
          check-latest: false

      - name: Find hardcoded values in changed files
        id: find-hardcoded-values
        run: |
          set -e
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...origin/${{ github.event.pull_request.head.ref }} | grep 'app/src/main/java/.*\.kt')
          STRING_WARNINGS=""
          SIZE_WARNINGS=""
          for file in $CHANGED_FILES; do
            FILE_NAME=$(basename $file)
            STRING_LINES=$(grep -nE '"[^"]*"' $file | grep -v 'const val' | grep -v '""' | grep -v '@SerializedName') || true
            SIZE_LINES=$(grep -nE '[0-9]+\.dp' $file) || true
            if [ ! -z "$STRING_LINES" ]; then
              STRING_WARNINGS="$STRING_WARNINGS\n## $FILE_NAME\n**Full Path:** $file\n### Hardcoded Strings\n$STRING_LINES"
            fi
            if [ ! -z "$SIZE_LINES" ]; then
              SIZE_WARNINGS="$SIZE_WARNINGS\n## $FILE_NAME\n**Full Path:** $file\n### Hardcoded Sizes\n$SIZE_LINES"
            fi
          done
          if [ -z "$STRING_WARNINGS" ] && [ -z "$SIZE_WARNINGS" ]; then
            echo "No hardcoded values found."
          else
            echo "STRING_WARNINGS<<EOF" >> $GITHUB_ENV
            echo -e "$STRING_WARNINGS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "SIZE_WARNINGS<<EOF" >> $GITHUB_ENV
            echo -e "$SIZE_WARNINGS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "::warning::Hardcoded values found."
          fi
        shell: /usr/bin/bash -e {0}
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Adopt_jdk/17.0.14-7/x64

      - name: Post string warnings as comments
        if: env.STRING_WARNINGS != ''
        uses: actions/github-script@v5
        with:
          script: |
            const stringWarnings = process.env.STRING_WARNINGS.split('\n');
            let stringCommentBody = '### Hardcoded String Values Warning\n';
            stringWarnings.forEach(line => {
              if (line.trim() !== '') {
                stringCommentBody += `${line}\n`;
              }
            });
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: stringCommentBody
            });

      - name: Post size warnings as comments
        if: env.SIZE_WARNINGS != ''
        uses: actions/github-script@v5
        with:
          script: |
            const sizeWarnings = process.env.SIZE_WARNINGS.split('\n');
            let sizeCommentBody = '### Hardcoded Size Values Warning\n';
            sizeWarnings.forEach(line => {
              if (line.trim() !== '') {
                sizeCommentBody += `${line}\n`;
              }
            });
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: sizeCommentBody
            });
